

def range_sum(integers, range_size):

    integers_len = len(integers)
    last_first_index = integers_len - range_size

    sums = []
    first = integers[0]
    r_sum = sum(integers[0:range_size])
    sums.append(r_sum)
    for i in range(last_first_index):
        new = integers[i + range_size]
        r_sum = r_sum + new - first
        first = integers[i + 1]
        sums.append(r_sum)

    return sums

assert(range_sum([4, 7, 1, 10, -5, 1, 2, -1], 3) == [12, 18, 6, 6, -2, 2])


# My solution at the Amazon interview

# # Given an input array of integers, and an input integer range size,
# # output an array of calculated sums generated by each set of consecutive
# # integers of that range size.
#
# # input: [4, 7, 1, 10, -5, 1, 2, -1]
# # range: 3
# # output: [12, 18, 6, 6, -2, 2]
#
# def range_sum(integers, range_size):
#
#     integers_len = len(integers)
#     last_index = integers_len - range_size
#
#     sums = []
#     first = integers[0]
#     sum = integers[0:range_size]
#     sums.append(sum)
#     for i in range(last_index + 1):
#         new = integers[i + range_size]
#         sum = sum + new - first
#         first = integers[i + 1]
#         sums.append(sum)
#
#     return sums
#
# assert([4, 7, 1, 10, -5, 1, 2, -1] == [12, 18, 6, 6, -2, 2])
